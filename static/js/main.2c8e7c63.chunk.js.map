{"version":3,"sources":["utils/fetchClient.ts","components/UserContext.tsx","components/UserSelector.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","client","UserContext","React","createContext","UsersProvider","children","useState","users","setUsers","useEffect","Provider","value","UserSelector","selectedUser","onChange","useContext","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","className","classNames","type","onClick","current","name","id","role","map","user","href","PostsList","posts","selectedPostId","onPostSelected","post","title","Loader","NewCommentForm","onSubmit","submitting","setSubmitting","setName","email","setEmail","setBody","isValid","Boolean","handleSubmit","event","a","preventDefault","onReset","htmlFor","placeholder","target","disabled","PostDetails","comments","setComments","loaded","setLoaded","hasError","setHasError","visible","setVisible","loadComments","getComments","addComment","postId","newComment","prevComments","deleteComment","commentId","currentComments","filter","comment","length","App","setPosts","setUser","selectedPost","setSelectedPost","LoadPosts","userId","loadedPosts","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2c8e7c63.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n// const BASE_URL = 'https://mate.academy/students-api';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\nexport const UsersProvider: React.FC = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  // const LoadUsers = async () => {\n  //   const loadedUsers = await client.get<User[]>('/users');\n\n  //   setUsers(loadedUsers);\n  // };\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(setUsers);\n    // LoadUsers();\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","/* eslint-disable consistent-return */\nimport React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UserContext';\nimport { User } from '../types/User';\n\ninterface Props {\n  value: User | null,\n  onChange: (user: User) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  value: selectedUser,\n  onChange,\n}) => {\n  const users = useContext(UserContext);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div className={classNames('dropdown', { 'is-active': expanded })}>\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId?: number,\n  onPostSelected: (post: Post | null) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onPostSelected,\n}) => (\n  <div className=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id}>\n            <th>{post.id}</th>\n            <td>{post.title}</td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onPostSelected(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [submitting, setSubmitting] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const isValid = Boolean(name && email && body);\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isValid) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    await onSubmit({\n      name,\n      email,\n      body,\n    });\n\n    setSubmitting(false);\n    setBody('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={resetForm}>\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': !name })}\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!name && (\n            <span className=\"icon is-small is-right has-text-danger\">\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && (\n          <p className=\"help is-danger\">Name is required</p>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': !email })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!email && (\n            <span className=\"icon is-small is-right has-text-danger\">\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email && (\n          <p className=\"help is-danger\">Email is required</p>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': !body })}\n            value={body}\n            onChange={event => setBody(event.target.value)}\n          />\n        </div>\n\n        {!body && (\n          <p className=\"help is-danger\">Enter some text</p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n            disabled={!isValid}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  const loadComments = async () => {\n    setLoaded(false);\n    setHasError(false);\n    setVisible(false);\n\n    try {\n      // setHasError(false);\n      const getComments = await client.get<Comment[]>(`/comments?postId=${post.id}`);\n\n      setComments(getComments);\n    } catch (error) {\n      setHasError(true);\n    }\n\n    setLoaded(true);\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [post.id]);\n\n  //  export const createComment = (data: Omit<Comment, 'id'>) => {\n  //   return client.post<Comment>('/comments', data);\n  //  };\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await client.post<Comment>('/comments', {\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments((prevComments) => {\n        const newComments = [...prevComments, newComment];\n\n        return newComments;\n      });\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== commentId,\n      ),\n    );\n\n    await client.delete(`/comments/${commentId}`);\n  };\n\n  return (\n    <div className=\"content\">\n      <div className=\"block\">\n        <h2>\n          {`#${post.id}: ${post.title}`}\n        </h2>\n        <p>{post.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded && <Loader />}\n\n        {loaded && hasError && (\n          <div className=\"notification is-danger\">\n            Something went wrong\n          </div>\n        )}\n\n        {loaded && !hasError && comments.length === 0 && (\n          <p className=\"title is-4\">No comments yet</p>\n        )}\n\n        {loaded && !hasError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article className=\"message is-small\" key={comment.id}>\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`}>\n                    {comment.name}\n                  </a>\n\n                  <button\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { UserSelector } from './components/UserSelector';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { UsersProvider } from './components/UserContext';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const [user, setUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const LoadPosts = async (userId: number) => {\n    setLoaded(false);\n    try {\n      const loadedPosts = await client.get<Post[]>(`/posts?userId=${userId}`);\n\n      setPosts(loadedPosts);\n      setLoaded(true);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (user) {\n      LoadPosts(user.id);\n    } else {\n      setPosts([]);\n    }\n  }, [user?.id]);\n\n  return (\n    <UsersProvider>\n      <main className=\"section\">\n        <div className=\"container\">\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector\n                    value={user}\n                    onChange={setUser}\n                  />\n                </div>\n\n                <div className=\"block\" data-cy=\"MainContent\">\n                  {!user && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                  {user && !loaded && (\n                    <Loader />\n                  )}\n\n                  {user && loaded && hasError && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                  {user && loaded && !hasError && posts.length === 0 && (\n                    <div className=\"notification is-warning\">\n                      No posts yet\n                    </div>\n                  )}\n\n                  {user && loaded && !hasError && posts.length > 0 && (\n                    <PostsList\n                      posts={posts}\n                      selectedPostId={selectedPost?.id}\n                      onPostSelected={setSelectedPost}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': selectedPost },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                {selectedPost ? (\n                  <PostDetails post={selectedPost} />\n                ) : (\n                  <p>Choose a post</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </UsersProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}